// Generated by CoffeeScript 1.10.0
(function() {
  var Cube;

  Cube = (function() {
    function Cube(geometry, material, c) {
      this.mesh = new THREE.Mesh(geometry, material);
      this.mesh.position.set(c.x, c.y, c.z);
      this.speed = new THREE.Vector3(c.speed.x, c.speed.y, c.speed.z);
      this.rotationSpeed = new THREE.Euler(c.rotationSpeed.x, c.rotationSpeed.y, c.rotationSpeed.z);
    }

    Cube.prototype.move = function() {
      this.mesh.position.add(this.speed);
      this.mesh.rotation.x += this.rotationSpeed.x;
      this.mesh.rotation.y += this.rotationSpeed.y;
      this.mesh.rotation.z += this.rotationSpeed.z;
    };

    Cube.prototype.colidesWithCamera = function(camera, minSquaredDistance) {
      if (minSquaredDistance == null) {
        minSquaredDistance = 60;
      }
      if (this.mesh.position.distanceToSquared(camera.position) <= minSquaredDistance) {
        return true;
      } else {
        return false;
      }
    };

    Cube.prototype.set = function(c) {
      var getIfNotNull;
      getIfNotNull = function(p, d) {
        if (d !== null && d !== void 0) {
          return d;
        } else {
          return p;
        }
      };
      this.mesh.position.x = getIfNotNull(this.mesh.position.x, c.x);
      this.mesh.position.y = getIfNotNull(this.mesh.position.y, c.y);
      this.mesh.position.z = getIfNotNull(this.mesh.position.z, c.z);
      if (c.speed !== void 0) {
        this.speed.x = getIfNotNull(this.speed.x, c.speed.x);
        this.speed.y = getIfNotNull(this.speed.y, c.speed.y);
        this.speed.z = getIfNotNull(this.speed.z, c.speed.z);
      }
      if (c.rotationSpeed !== void 0) {
        this.rotationSpeed.x = getIfNotNull(this.rotationSpeed.x, c.rotationSpeed.x);
        this.rotationSpeed.y = getIfNotNull(this.rotationSpeed.y, c.rotationSpeed.y);
      }
    };

    return Cube;

  })();

  window.Cube = Cube;

}).call(this);
